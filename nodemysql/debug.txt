test
{ options: 
   { timestamps: true,
     createdAt: 'createdAt',
     updatedAt: 'updatedAt',
     deletedAt: 'deletedAt',
     instanceMethods: { testestMethod: [Function] },
     classMethods: { testMethod: [Function] },
     validate: {},
     freezeTableName: false,
     underscored: false,
     underscoredAll: false,
     paranoid: false,
     whereCollection: null,
     schema: null,
     schemaDelimiter: '',
     defaultScope: null,
     scopes: null,
     hooks: {},
     name: { plural: 'Recipes', singular: 'Recipe' },
     indexes: [],
     omitNull: false,
     sequelize: 
      { options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        daoFactoryManager: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  associations: 
   { RecipeIngredients: 
      { associationType: 'BelongsToMany',
        source: [Circular],
        target: [Object],
        targetAssociation: null,
        options: [Object],
        sequelize: [Object],
        through: [Object],
        scope: undefined,
        isMultiAssociation: true,
        isSelfAssociation: false,
        doubleLinked: false,
        as: 'Ingredients',
        combinedTableName: 'IngredientsRecipes',
        foreignKeyDefault: true,
        foreignKeyAttribute: [Object],
        foreignKey: 'RecipeId',
        otherKeyDefault: true,
        otherKeyAttribute: [Object],
        otherKey: 'IngredientId',
        associationAccessor: 'RecipeIngredients',
        throughModel: [Object],
        combinedName: 'RecipeIngredients',
        accessors: [Object],
        identifier: 'RecipeId',
        foreignIdentifier: 'IngredientId',
        primaryKeyDeleted: true,
        identifierField: 'RecipeId',
        foreignIdentifierField: 'IngredientId' } },
  daoFactoryManager: 
   { daos: [ [Object], [Object], [Circular] ],
     sequelize: 
      { options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        daoFactoryManager: [Circular],
        modelManager: [Circular],
        connectionManager: [Object],
        importCache: {},
        queryInterface: [Object] } },
  modelManager: 
   { daos: [ [Object], [Object], [Circular] ],
     sequelize: 
      { options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        daoFactoryManager: [Circular],
        modelManager: [Circular],
        connectionManager: [Object],
        importCache: {},
        queryInterface: [Object] } },
  name: 'Recipe',
  scopeObj: {},
  sequelize: 
   { options: 
      { dialect: 'mysql',
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {} },
     config: 
      { database: 'sequelizisation',
        username: 'test',
        password: 'test',
        host: 'localhost',
        port: 3306,
        pool: [Object],
        protocol: 'tcp',
        queue: undefined,
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        maxConcurrentQueries: undefined,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: { sequelize: [Circular], connectionManager: [Object] },
     models: 
      { Ingredient: [Object],
        RecipeIngredient: [Object],
        Recipe: [Circular] },
     daoFactoryManager: { daos: [Object], sequelize: [Circular] },
     modelManager: { daos: [Object], sequelize: [Circular] },
     connectionManager: 
      { sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        onProcessExit: [Function],
        lib: [Object],
        pool: [Object] },
     importCache: {},
     queryInterface: { sequelize: [Circular], QueryGenerator: [Object] } },
  underscored: undefined,
  tableName: 'Recipes',
  rawAttributes: 
   { id: 
      { type: [Object],
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'id',
        _modelAttribute: true,
        field: 'id' },
     name: 
      { type: [Object],
        Model: [Circular],
        fieldName: 'name',
        _modelAttribute: true,
        field: 'name' },
     createdAt: 
      { type: 'DATETIME',
        allowNull: false,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'createdAt',
        _modelAttribute: true,
        field: 'createdAt' },
     updatedAt: 
      { type: 'DATETIME',
        allowNull: false,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'updatedAt',
        _modelAttribute: true,
        field: 'updatedAt' } },
  attributes: 
   { id: 
      { type: [Object],
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'id',
        _modelAttribute: true,
        field: 'id' },
     name: 
      { type: [Object],
        Model: [Circular],
        fieldName: 'name',
        _modelAttribute: true,
        field: 'name' },
     createdAt: 
      { type: 'DATETIME',
        allowNull: false,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'createdAt',
        _modelAttribute: true,
        field: 'createdAt' },
     updatedAt: 
      { type: 'DATETIME',
        allowNull: false,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'updatedAt',
        _modelAttribute: true,
        field: 'updatedAt' } },
  primaryKeys: 
   { id: 
      { type: [Object],
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'id',
        _modelAttribute: true,
        field: 'id' } },
  _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
  testMethod: [Function],
  primaryKeyAttributes: [ 'id' ],
  primaryKeyAttribute: 'id',
  primaryKeyField: 'id',
  primaryKeyCount: 1,
  hasPrimaryKeys: true,
  _hasPrimaryKeys: true,
  _isPrimaryKey: { [Function] cache: {} },
  DAO: { [Function] super_: [Function] },
  Instance: { [Function] super_: [Function] },
  _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
  _hasReadOnlyAttributes: 2,
  _isReadOnlyAttribute: { [Function] cache: {} },
  _booleanAttributes: [],
  _dateAttributes: [ 'createdAt', 'updatedAt' ],
  _hstoreAttributes: [],
  _jsonAttributes: [],
  _virtualAttributes: [],
  _defaultValues: {},
  _hasBooleanAttributes: false,
  _isBooleanAttribute: { [Function] cache: {} },
  _hasDateAttributes: true,
  _isDateAttribute: { [Function] cache: {} },
  _hasHstoreAttributes: false,
  _isHstoreAttribute: { [Function] cache: {} },
  _hasJsonAttributes: false,
  _isJsonAttribute: { [Function] cache: {} },
  _hasVirtualAttributes: false,
  _isVirtualAttribute: { [Function] cache: {} },
  _hasDefaultValues: false,
  tableAttributes: 
   { id: 
      { type: [Object],
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'id',
        _modelAttribute: true,
        field: 'id' },
     name: 
      { type: [Object],
        Model: [Circular],
        fieldName: 'name',
        _modelAttribute: true,
        field: 'name' },
     createdAt: 
      { type: 'DATETIME',
        allowNull: false,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'createdAt',
        _modelAttribute: true,
        field: 'createdAt' },
     updatedAt: 
      { type: 'DATETIME',
        allowNull: false,
        _autoGenerated: true,
        Model: [Circular],
        fieldName: 'updatedAt',
        _modelAttribute: true,
        field: 'updatedAt' } },
  autoIncrementField: 'id' }
testest
Executing (default): CREATE TABLE IF NOT EXISTS `Ingredients` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): CREATE TABLE IF NOT EXISTS `Recipes` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): CREATE TABLE IF NOT EXISTS `RecipeIngredients` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `IngredientId` INTEGER , `RecipeId` INTEGER , PRIMARY KEY (`IngredientId`, `RecipeId`), FOREIGN KEY (`IngredientId`) REFERENCES `Ingredients` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`RecipeId`) REFERENCES `Recipes` (`id`)) ENGINE=InnoDB;
Executing (default): CREATE TABLE IF NOT EXISTS `Ingredients` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Recipes` AS `Recipe` WHERE `Recipe`.`id`=1;
Executing (default): SHOW INDEX FROM `Ingredients`
Executing (default): SHOW INDEX FROM `Recipes`
Executing (default): SHOW INDEX FROM `RecipeIngredients`
Executing (default): SHOW INDEX FROM `Ingredients`
{ dataValues: 
   { id: 1,
     name: 'salade niçoise',
     createdAt: Mon Jan 12 2015 19:58:17 GMT+0100 (CET),
     updatedAt: Tue Jan 13 2015 12:03:02 GMT+0100 (CET) },
  _previousDataValues: 
   { id: 1,
     name: 'salade niçoise',
     createdAt: Mon Jan 12 2015 19:58:17 GMT+0100 (CET),
     updatedAt: Tue Jan 13 2015 12:03:02 GMT+0100 (CET) },
  __options: 
   { timestamps: true,
     createdAt: 'createdAt',
     updatedAt: 'updatedAt',
     deletedAt: 'deletedAt',
     instanceMethods: { testestMethod: [Function] },
     classMethods: { testMethod: [Function] },
     validate: {},
     freezeTableName: false,
     underscored: false,
     underscoredAll: false,
     paranoid: false,
     whereCollection: { id: 1 },
     schema: null,
     schemaDelimiter: '',
     defaultScope: null,
     scopes: null,
     hooks: {},
     name: { plural: 'Recipes', singular: 'Recipe' },
     indexes: [],
     omitNull: false,
     sequelize: 
      { options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        daoFactoryManager: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  options: 
   { isNewRecord: false,
     isDirty: false,
     raw: true,
     attributes: [ 'id', 'name', 'createdAt', 'updatedAt' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }
